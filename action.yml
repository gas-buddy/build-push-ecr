name: "Build and Publish to ECR"
description: "Builds and Pushes built artifacts to ECT"

inputs:
  npm-token:
    description: "npm credentials, most useful for private repositories"
    required: true
  node-env:
    description: "The NODE_ENV value for the image, defaults to production"
    required: false
  image-tag:
    description: "The desired tag for the Docker image"
    required: false
    default: ${{ github.run_id }}_${{ github.sha }}
  node-image-tag:
    description: "The tag for the base node-app image"
    required: false
    default: 14-production
  registry-name:
    description: "The name of the ECR registry repository"
    required: true
  aws-access-key-id:
    description: "AWS account id for image registry"
    required: true
  aws-secret-access-key:
    description: "AWS Secret for the access key"
    required: true
  aws-region:
    description: "AWS region for the image registry"
    required: false
    default: us-east-1
  skip-build:
    description: "Set to true if the Docker image is already built earlier in the workflow"
    required: false
    default: false
  apk_packages:
    description: "Extra packages required to build the image"
    required: false

runs:
  using: "composite"
  steps:
    - name: Build docker image ${{ inputs.registry-name }}:${{ inputs.image-tag }}
      shell: bash
      run: |
        cp ${{ github.action_path }}/Dockerfile .
        export NODE_ENV_ARG="${{ inputs.node-env }}"
        export NODE_IMAGE_TAG="${{ inputs.node-image-tag }}"
        export APK_PACKAGES="${{ inputs.apk_packages }}"
        docker build -t ${{ inputs.registry-name }}:${{ inputs.image-tag }} .
      if: ${{ inputs.skip-build != 'true' }}

    - name: Push to ECR
      id: ecr
      uses: gas-buddy/gh-ecr-push@v2.0.2
      with:
        access-key-id: ${{ inputs.aws-access-key-id }}
        secret-access-key: ${{ inputs.aws-secret-access-key }}
        region: ${{ inputs.aws-region }}
        image: ${{ inputs.registry-name }}:${{ inputs.image-tag }}
